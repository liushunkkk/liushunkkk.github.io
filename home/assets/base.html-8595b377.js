import{_ as n,o as s,c as a,a as t}from"./app-2cd98865.js";const e="/home/assets/context-fac04719.png",o="/home/assets/scheduler-28ba180b.png",p="/home/assets/gmp-f0656148.png",c="/home/assets/5a293b01f1ae37cf93a18957a39457ac-2d56b808.png",i="/home/assets/livetime-3b6541ea.png",l="/home/assets/rootset-55408285.png",u="/home/assets/three-color-gc-c4107d03.png",d="/home/assets/three-color-gc-error-prevent-14879c68.png",r="/home/assets/three-color-write-prevent-deb32422.png",k="/home/assets/three-color-delete-barrier-6f6cc80f.png",v="/home/assets/caozuohanshu-544e7578.png",m={},b=t(`<h1 id="base" tabindex="-1"><a class="header-anchor" href="#base" aria-hidden="true">#</a> Base</h1><p>go的一些基础语法知识</p><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> context</h2><p>context是golang中非常重要的接口，用于定语goroutine中的上下文信息，context常用于以下几种情况：</p><ul><li><p>数据传递：在多个goroutine中传递数据</p></li><li><p>超时管理： 通过配置超时时间，可以方便地配置协程的终止时间</p></li><li><p>终止协程： 通过使用 <code>cancel()</code> 方法，协程可以很方便地终止，可以批量管理多个协程的终止</p></li></ul><h3 id="context接口" tabindex="-1"><a class="header-anchor" href="#context接口" aria-hidden="true">#</a> Context接口</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// A Context carries a deadline, a cancelation signal, and other values across</span>
<span class="token comment">// API boundaries.</span>
<span class="token comment">//</span>
<span class="token comment">// Context&#39;s methods may be called by multiple goroutines simultaneously.</span>
<span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span>
    <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
    <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="根节点和派生节点" tabindex="-1"><a class="header-anchor" href="#根节点和派生节点" aria-hidden="true">#</a> 根节点和派生节点</h3><p>可以为context创建根节点和派生节点，为树形结构，当根节点被 <code>cancel()</code> 或超时终止时，它的所有派生节点也会被终止，根节点的数据也会被所有派生节点共享。</p><img src="`+e+`" alt="context 结构" style="zoom:67%;"><p>创建根节点</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建空白 context</span>
ctx2 <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// TODO 同样是空白 context</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建派生节点</p><p>使用 <code>context.WithXXX()</code> 创建派生 <code>context</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;base&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;baseVal&quot;</span><span class="token punctuation">)</span>
	ctx1 <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;ctx1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ctx1Val&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ctx1<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 结果：</span>
<span class="token comment">// context.Background.WithValue(type string, val baseVal)</span>
<span class="token comment">// context.Background.WithValue(type string, val baseVal).WithValue(type string, val ctx1Val)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="withvalue" tabindex="-1"><a class="header-anchor" href="#withvalue" aria-hidden="true">#</a> WithValue()</h3><p>context.WithValue()可以用于创建派生节点并添加键值数据，同时保留父级 context 所有的数据</p><h3 id="withdeadline-withtimeout" tabindex="-1"><a class="header-anchor" href="#withdeadline-withtimeout" aria-hidden="true">#</a> WithDeadline&amp;WithTimeout</h3><p><code>context.WithDeadline()</code> 和 <code>context.WithTimeout()</code> 可以用来创建带有超时控制的 <code>context</code></p><p>注意:</p><p><code>WithTimeout(1*time.Second)</code> 等同于 <code>WithDeadline(time.Now().Add(1*time.Second))</code></p><p>源代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">WithTimeout</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以看到，对于超时的context而言，他也有cancel函数返回，也是支持手动取消的，但是WithValue就没有这个。</strong></p><p>样例；</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx1 context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
      <span class="token keyword">select</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token operator">&lt;-</span> ctx1<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;time out&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;running&quot;</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
  time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> tims<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="withcancel" tabindex="-1"><a class="header-anchor" href="#withcancel" aria-hidden="true">#</a> WithCancel</h3><p>使用 <code>WithCancel()</code> 可以创建手动终止的 <code>context</code> 执行 <code>cancel()</code> 即可手动终止。举例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx1 context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
      <span class="token keyword">select</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx1<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;canceled&quot;</span><span class="token punctuation">)</span>
        	<span class="token keyword">return</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
        	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;running&quot;</span><span class="token punctuation">)</span>
        	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
  time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
  <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="goroutine" tabindex="-1"><a class="header-anchor" href="#goroutine" aria-hidden="true">#</a> Goroutine</h2><p>Goroutine 是 Go 语言的并发编程模型，它是一种轻量级的线程，由 Go 运行时管理，也可以称之为协程。</p><p>优点</p><ul><li><strong>轻量级</strong>：Goroutine 的栈空间初始大小只有 2KB，可以动态扩容，最大可达 1GB</li><li><strong>快速启动</strong>：Goroutine 的启动时间只有 1~2us</li><li><strong>高效调度</strong>：Goroutine 的调度器采用 M:N 模型，可以将 M 个 Goroutine 映射到 N 个 OS 线程上，实现高效调度</li><li><strong>通信简单</strong>：Goroutine 之间通过 Channel 进行通信，实现数据共享</li><li><strong>无锁</strong>：Goroutine 之间通过 Channel 进行通信，无需加锁</li><li><strong>高并发</strong>：Goroutine 可以轻松创建数十万个，实现高并发</li><li><strong>高性能</strong>：Goroutine 的调度器采用抢占式调度，实现高性能</li></ul><p>创建 Goroutine</p><p>由于 Goroutine 是 Golang 非常重视的基本功能，因此在 Golang 中创建异步 Goroutine 非常简单，只需要在函数调用前加上 <code>go</code> 关键字即可，比绝大部分的编程语言都要简单。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>func main() {
    go func() {
        for {
            fmt.Println(&quot;running...&quot;)
            time.Sleep(time.Second)
        }
    }()

    time.Sleep(5 * time.Second)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>go</code> 加上任意 <code>func</code> 即可创建一个 Goroutine，Goroutine 会在后台执行，不会阻塞主线程。</p><p>如何停止 Goroutine</p><ul><li><strong>运行结束</strong>：Goroutine 会在函数运行结束后自动结束</li><li><strong>超时结束</strong>：通过 <code>context.WithTimeout()</code> 或 <code>context.WithDeadline()</code> 可以设置 Goroutine 的超时时间</li><li><strong>手动结束</strong>：通过 <code>context.WithCancel()</code> 可以手动结束 Goroutine</li><li><strong>通道结束</strong>：通过 Channel 通信，可以结束 Goroutine，上面两种实际也是通道</li></ul><h2 id="panic-recover" tabindex="-1"><a class="header-anchor" href="#panic-recover" aria-hidden="true">#</a> Panic &amp; Recover</h2><p>在 Golang 中，<code>panic</code> 和 <code>recover</code> 是用于处理异常的两个关键字，<code>panic</code> 用于引发异常，<code>recover</code> 用于捕获异常。</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>panic(interface{})</code></td><td>引发异常，停止当前 <code>Goroutine</code> 的执行, 并依次执行当前 <code>Goroutine</code> 中的 <code>defer</code> 方法</td></tr><tr><td><code>recover() interface{}</code></td><td>捕获异常，返回异常信息；用于处理异常，防止异常导致的程序崩溃，仅可以在 <code>defer</code> 中调用</td></tr></tbody></table><p>作用范围</p><ul><li><code>panic</code>只会触发当前goroutine的defer。</li><li>recover仅在defer中调用有效，在其他地方调用只会返回nil</li><li>panic也可以在defer中调用，可用于处理很多错误，然后返回一个总的新错误。</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token number">4</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token function">testPanic</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">testPanic</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;recover panic: &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
			<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;panic in defer&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;panic %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;test panic: &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// test panic:  3</span>
<span class="token comment">// recover panic:  1</span>
<span class="token comment">// test panic:  2</span>
<span class="token comment">// panic: panic 1 [recovered]</span>
<span class="token comment">//         panic: panic in defer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>error</strong></p><p>判断error需要使用<code>errors.Is</code>或<code>errors.As</code>，而不是用==判断</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> ErrCouldNotOpen <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ErrCouldNotOpen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// handle the error</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;unknown error&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行流程</p><ul><li><p>编译器将panic转换为runtime包中的gopanic函数并调用</p></li><li><p>将goroutine的defer链表逆序执行（defer的执行可以类比于栈，按照先进后出的顺序执行）</p><ul><li>如果defer中没有recover，则执行defer中的代码</li><li>如果 <code>defer</code> 中有 <code>recover</code>，则会调用 <code>runtime.gorecover</code>, 将 <code>panic</code> 中的 <code>recovered</code> 置为 <code>true</code>，然后从 <code>runtime._defer</code> 中取出程序计数器 <code>pc</code> 和栈指针 <code>sp</code>，并执行 <code>runtime.recovery</code> 恢复程序，最后调用 <code>runtime.deferproc</code> 返回 <code>1</code>，表示 <code>recover</code> 成功。</li><li><code>panic</code> 的 <code>deferreturn</code> 字段置为 <code>true</code>，表示 <code>defer</code> 已经执行完毕</li></ul></li><li><p>如果所有 <code>defer</code> 中都没有 <code>recover()</code>， 则程序会执行 <code>runtime.fatalpanic</code> 终止运行</p></li></ul><p>不可以捕获的异常</p><ul><li>内存溢出： 当预分配空间过大导致内存溢出时，会返回 <code>runtime: out of memory</code>, 无法通过 <code>recover</code> 捕获恢复</li><li>map 并发读写: 当 map 并发读写时，会返回 <code>concurrent map read and map write</code>, 无法通过 <code>recover</code> 捕获恢复</li><li>栈内存耗尽: 当栈内存耗尽时，会返回 <code>runtime: goroutine stack exceeds 1000000000-byte limit</code>, 无法通过 <code>recover</code> 捕获恢复</li><li>Goroutine运行时错误: 运行时环境错误，会返回 <code>runtime: goroutine running on NULL machine</code>, 无法通过 <code>recover</code> 捕获恢复</li><li>全部Goroutine休眠: 当全部 Goroutine 休眠时，会返回 <code>all goroutines are asleep - deadlock!</code>, 无法通过 <code>recover</code> 捕获恢复，其实就是channel操作不当导致死锁了。</li></ul><p>可以捕获的异常</p><ul><li>数组越界: 当数组越界时，会返回 <code>panic: runtime error: index out of range</code>, 可以通过 <code>recover</code> 捕获恢复</li><li>空指针引用: 当空指针引用时，会返回 <code>panic: runtime error: invalid memory address or nil pointer dereference</code>, 可以通过 <code>recover</code> 捕获恢复</li><li>类型断言失败: 当类型断言失败时，会返回 <code>panic: interface conversion: interface {} is nil, not int</code>, 可以通过 <code>recover</code> 捕获恢复</li><li>除数为0: 当除数为0时，会返回 <code>panic: runtime error: integer divide by zero</code>, 可以通过 <code>recover</code> 捕获恢复</li><li>调用不存在的方法: 当调用不存在的方法时，会返回 <code>panic: runtime error: invalid memory address or nil pointer dereference</code>, 可以通过 <code>recover</code> 捕获恢复</li></ul><h2 id="gmp调度器" tabindex="-1"><a class="header-anchor" href="#gmp调度器" aria-hidden="true">#</a> GMP调度器</h2><img src="`+o+'" alt="os-runtime-program" style="zoom:50%;"><p>通过上图可以看到，操作系统内核和写的逻辑代码之间通过runtime进行交互，runtime会调用操作系统的系统调用，操作系统来调用硬件资源，以此来运行程序。</p><p>所谓的scheduler就是负责调度goroutine的模块，他会根据一定的策略来调度goroutine的执行，这样才能保证goroutine的执行顺序和并发度。其使用的模型是GMP模型。</p><p>**GMP 模型是 Go 语言调度器的核心模型，它是 Go 语言调度器的基础。**GMP 模型构成：</p><table><thead><tr><th><strong>组件</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>G (Goroutine)</td><td>表示一个 Goroutine，包含栈和相关的上下文信息</td></tr><tr><td>M (Machine)</td><td>表示一个执行线程（真正的内核线程），负责将 Goroutine 映射到操作系统的线程上。每个 M 都有自己的调用栈和寄存器状态</td></tr><tr><td>P (Processor)</td><td>表示一个逻辑处理器，维护一个处于可运行状态的 Goroutine 队列，每个 M 都和一个 P 相关联</td></tr></tbody></table><img src="'+p+'" alt="screenshot2024-12-24 11.18.47" style="zoom:33%;"><ul><li><p><strong>全局队列RRQ</strong>(global runnable queue)：存放所有正在等待运行的<code>G</code></p></li><li><p><strong>本地队列LRQ</strong>(local runnable queue)：每个<code>P</code>都有一个本地队列，用于存放当前 <code>P</code> 等待和正在运行的 <code>G</code>，每个 <code>P</code> 的本地队列中最多存放 <code>256</code> 个 <code>G</code> 。创建 <code>G</code> 时，会优先放入本地队列，如果本地队列满了， 则会将队列中一半的 <code>G</code> 移动到全局队列中。</p></li><li><p><strong>P 的数量</strong>：<code>P</code> 的数量是固定的，由 <code>GOMAXPROCS</code> 决定，即最大并发数, 默认为 <code>CPU</code> 核数。可以通过<code>runtime.GOMAXPROCS(runtime.NumCPU())</code>更新值，他会返回之前的值，默认就是<code>runtime.NumCPU()</code>.</p></li><li><p><strong>M 的数量</strong>：<code>M</code> 的数量是动态的，由调度器决定，根据当前的负载情况动态调整, GO默认设置为 10000，实际上内核很难达到该限制，可以认为是没有限制。<code>M</code> 想要运行任务就需要获取 <code>P</code>，如果没有 <code>P</code>，<code>M</code> 就会阻塞。如果 <code>P</code> 的本地队列为空，<code>M</code> 会从全局队列中获取 <code>G</code>，放入本地队列。 如果全局队列也为空，<code>M</code> 会从其他随机一个 <code>P</code> 的本地队列中获取一半的 <code>G</code> 放到本地队列中。</p></li></ul><p>调度器策略</p><ul><li>抢占式调度 ：在协程中需要一个协程主动让出 CPU 下一个协程才能使用 CPU， 而 Goroutine 规定一个 Goroutine 每次最多只能占用 10ms 的 CPU，然后就要切换到下一个, 防止其他协程长时间不被执行</li><li>复用线程 ：Go 语言的调度器会复用线程，而不是每次都创建新的线程，这样可以减少线程创建和销毁的开销，提高性能。 <ul><li><strong>工作偷取(Work stealing)</strong>:当 <code>M</code> 没有可运行的 <code>G</code> 时，会尝试从其他线程绑定的 <code>P</code> 的本地队列中偷取一半的 <code>G</code>来运行，而不是销毁 <code>M</code></li><li><strong>挂起机制(Hand off)</strong>: 当 <code>G</code> 由于系统调用而阻塞时, <code>M</code> 会释放绑定的 <code>P</code> 供其他 <code>M</code> 使用</li></ul></li><li>并行：通过 <code>GOMAXPROCS</code> 配置 <code>P</code> 的数量，从而实现并行执行，<code>P</code> 的数量决定了并行度，<code>P</code> 的数量等于 CPU 核数时，可以实现最大并行度。</li><li>全局队列 ：当本地队列中没有可运行的 <code>G</code>， <code>M</code> 会先去全局队列尝试获取 <code>G</code>， 若全局队列中没有待运行的 <code>G</code> 则会尝试去其他 <code>P</code> 的本地队列中偷取 <code>G</code></li></ul><img src="'+c+'" alt="在这里插入图片描述" style="zoom:50%;"><p>流程：</p><ul><li><p>创建一个 <code>G</code>：如果本地队列没满，则随机放入一个未满的本地队列，否则放入全局队列。</p></li><li><p>执行 <code>G</code>：<code>P</code> 会获取一个 <code>G</code> 在 <code>M</code> 中执行，若 <code>G</code> 产生 <code>systemCall</code> 阻塞，则会将 <code>M</code> 放入休眠队列，如果当前有一些 G 在执行，runtime 会把这个线程 M 从 P 中摘除 (detach)，然后再创建一个新的操作系统的线程 (如果有空闲的线程可用就复用空闲线程) 来服务于这个 P；</p></li><li><p>获取 <code>G</code>：若本地队列中 <code>G</code> 已经执行完，则尝试从从全局队列中获取 <code>G</code>，若全局队列中没有可运行的 <code>G</code>， 则从其他 <code>P</code> 的本地队列中偷取 <code>G</code></p></li></ul><blockquote><p>常见的阻塞：IO select，系统调用，channel，mutex，sleep</p></blockquote><p>生命周期：</p><img src="'+i+'" alt="dd" style="zoom:67%;"><p>特殊的 M0 和 G0</p><ul><li>M0：M0 是启动程序后的编号为 0 的主线程，这个 M 对应的实例会在全局变量 runtime.m0 中，不需要在 heap 上分配，M0 负责执行初始化操作和启动第一个 G， 在之后 M0 就和其他的 M 一样了。</li><li>G0：G0 是每次启动一个 M 都会第一个创建的 gourtine，G0 是仅用于负责调度的 G，G0 不指向任何可执行的函数，每个 M 都会有一个自己的 G0。在调度或系统调用时会使用 G0 的栈空间，全局变量的 G0 是 M0 的 G0。</li></ul><h2 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a> 垃圾回收</h2><h3 id="常见垃圾回收策略" tabindex="-1"><a class="header-anchor" href="#常见垃圾回收策略" aria-hidden="true">#</a> 常见垃圾回收策略</h3><p><strong>引用计数法</strong></p><ul><li>基本思想 <ul><li>给对象中添加一个引用计数字段，每当有一个地方引用它时，计数加 1；当引用失效时，计数减 1；当计数为 0 时，表示对象不再被使用，可以被回收。</li></ul></li><li>优点 <ul><li>无需遍历，不需要从根节点遍历，相对容易查找</li><li>立即回收垃圾，每个对象始终知道自己的被引用次数，一旦引用计数为 0，就会立即将自身连接到空闲链表上，等待回收</li><li>最大限度地减少程序暂停时间，在 mutator 更新引用计数时，就会触发垃圾回收，不需要等到内存耗尽时才触发，因此不会出现程序暂停时间过长的情况</li></ul></li><li>缺点: <ul><li>无法解决循环引用问题</li><li>每次引用计数发生变化时都需要修改计数器，引起额外的开销</li><li>需要额外的空间存储计数器</li></ul></li></ul><p>追踪回收算法：共包含三种策略：标记-清除（mark-sweep），标记-整理（mark-compact），标记-复制（mark-copying）算法，这三种都需要有STW。</p><p>标记-清除算法</p><ul><li>基本思想： <ul><li>从根对象出发，递归遍历所有可达对象，将可达对象标记为存活对象</li><li>遍历堆中所有对象，将未标记的对象回收</li></ul></li><li>优点: <ul><li>可以解决循环引用问题</li><li>不需要额外的空间存储计数器</li></ul></li><li>缺点: <ul><li>在清除阶段会产生大量的碎片，导致内存碎片化，可能会导致程序运行分配对象时找不到连续的内存空间而再次触发垃圾回收</li><li>执行效率不稳定</li></ul></li></ul><p><strong>标记-复制算法</strong></p><ul><li>工作原理： <ul><li>从根对象出发，递归遍历所有可达对象，将可达对象标记为存活对象</li><li>将堆划分成两个相等的区域：使用区和未使用区</li><li>在程序运行时只将对象放到使用区，当使用区满时，执行垃圾回收，遍历使用区的所有对象，判断存活对象并将存活对象移动至未使用区，然后清空使用区。最后将本两块区域的角色进行交换，即未使用区变成使用区，使用区变成未使用区</li></ul></li><li>优点: <ul><li>可以解决内存碎片化问题，每次执行垃圾回收都会将存活对象移动至未使用区，对象都是连续存放的</li><li>执行效率相对较高，由于只需要复制存活对象，清除未存活对象是批量操作，因此需要的时间相对较短，吞吐率更高</li><li>快速分配内存，由于内存是连续的，因此分配内存时只需要移动指针即可，相比其他算法使用的是空闲链表，连续内存分配效率更高</li></ul></li><li>缺点: <ul><li>空间利用率低，相同的内存空间下，只有一半的空间可以用来存放对象</li><li>递归效率低，由于需要递归遍历并复制所有可达对象，相比于迭代效率较低，且需要额外的栈开销，可能导致内存溢出</li></ul></li></ul><p><strong>标记-整理算法</strong></p><ul><li>工作原理： <ul><li>从根对象出发，递归遍历所有可达对象，将可达对象标记为存活对象</li><li>将存活对象移动至堆的一端，然后清除未存活对象</li></ul></li><li>优点: <ul><li>空间利用率高</li><li>相对于标记-复制算法来说空间利用率更高，不会浪费一半的空间</li></ul></li><li>缺点: <ul><li>执行效率较低，在将存活对象移动至堆的一端时，需要更多的时间, 当对象非常多时，暂停时间会比其他两种策略还要长</li></ul></li></ul><h3 id="go的垃圾回收" tabindex="-1"><a class="header-anchor" href="#go的垃圾回收" aria-hidden="true">#</a> GO的垃圾回收</h3><p>Go中采用最简单的“标记-清除”，“标记有用的对象，清除无用的对象”，采用广度优先搜索算法，从<strong>根集合出发</strong>，进行可达性分析，标记有用对象。为了减少GC对性能的影响，Go现在的版本支持并发进行垃圾回收。采用的标记法为三色标记法。</p><p>根集合是GC在标记过程中<strong>最先检查</strong>的对象。主要包括：</p><ul><li>全局变量：在程序编译期间就能确定，全局变量存在于程序的整个生命周期。</li><li>执行栈：Go语言中协程是分配在堆上，每个协程都含有自己的执行栈。</li><li>寄存器：寄存器的值可能表示一个指针，这些指针可能指向另一块内存空间。</li></ul><img src="'+l+'" alt="screenshot2024-12-24 15.00.47" style="zoom:33%;"><h4 id="三色标记算法" tabindex="-1"><a class="header-anchor" href="#三色标记算法" aria-hidden="true">#</a> 三色标记算法</h4><p>三色标记算法改进了标记-清除算法，将标记-清除算法的两个阶段（标记和清除）分解为三个阶段（标记、标记终止和清除），减少了 <code>STW</code> 的时间。</p><p>三种对象</p><ul><li>白色：未访问，可能是需要回收的对象</li><li>灰色：访问中，自身被访问，但是子对象未被访问</li><li>黑色：访问完成，自身和子对象都被访问</li></ul><p>工作原理</p><ul><li>在垃圾回收开始时将根对象标记为灰色</li><li>在灰色对象中选择一个对象标记为黑色，然后将其子对象标记为灰色</li><li>将黑色对象指向的所有白色对象标记为灰色</li><li>重复步骤2和3，直到没有灰色对象</li><li>清除所有白色对象</li></ul><img src="'+u+'" alt="三色标记法过程" style="zoom:20%;"><p>三色标记正确的前提，需要达成以下一种三色不变性：</p><p>强三色不变性：在标记阶段，黑色对象不会指向白色对象</p><p>弱三色不变性：在标记阶段中，黑色对象指向的白色对象（G）必须包含一条灰色对象经过一个或多个白色对象后到达白色对象（G）的路径</p><img src="'+d+'" alt="弱三色不变性" style="zoom:20%;"><p>这种算法还是需要STW的，并发情况下，会产生标记错误，最终导致垃圾回收错误。</p><p>为了减少STW时间，能够使得垃圾回收并发进行，Golang引入了屏障技术，通过屏障技术可以在对象状态发生变化时，可以让垃圾回收器感知到，并正确处理。</p><h4 id="屏障技术" tabindex="-1"><a class="header-anchor" href="#屏障技术" aria-hidden="true">#</a> 屏障技术</h4><p>插入屏障</p><p>当一个对象 <code>A</code> 添加了对另一个对象 <code>B</code> 的引用时，会在 <code>A</code> 的引用列表中插入一个 <code>B</code> 的引用，并且将 <code>B</code> 标记为灰色。</p><img src="'+r+'" alt="插入屏障" style="zoom:17%;"><p>注意，插入屏障只会发生在堆中，所以对于栈中的D不会标记为灰色，需要再一次STW重新扫描，才能将D标记为黑色。</p><p>删除屏障</p><p>当一个对象 <code>A</code> 删除了对另一个对象 <code>B</code> 的引用时，会在 <code>A</code> 的引用列表中删除一个 <code>B</code> 的引用，如果 <code>B</code> 是白色的，则将 <code>B</code> 标记为灰色。</p><img src="'+k+`" alt="删除屏障" style="zoom:20%;"><p>插入屏障和删除屏障有以下缺点：</p><ul><li>插入屏障在扫描结束后还需要 <code>STW</code> 一次，将栈内对象重新扫描一遍</li><li>删除屏障回收精度较低，在回收开始时需要 <code>STW</code> 一次，将栈内对象扫描一遍，记录初始快照，保护初始时刻所有存活的对象</li></ul><p><strong>混合写屏障</strong></p><p>为了解决上述问题， <code>Golang</code> 引入了混合写屏障，混合写屏障是插入屏障和删除屏障的结合，可以在对象状态发生变化时，通知垃圾回收器。</p><p>工作原理</p><ol><li>在垃圾回收开始时将栈上的对象全部扫描并标记为黑色（不进行二次扫描）</li><li>在垃圾回收期间任何栈上创建的对象都会标记为黑色，避免了二次扫描</li><li>在垃圾回收期间删除任何的对象都会标记为灰色</li><li>在垃圾回收期间创建的任何对象都会标记为灰色</li></ol><p>目前整个GC流程会进行两次STW(Stop The World), 第一次是Mark阶段的开始, 第二次是Mark Termination阶段. 第一次STW会准备根对象的扫描, 启动写屏障(Write Barrier)和辅助GC(mutator assist). 第二次STW会重新扫描部分根对象, 禁用写屏障(Write Barrier)和辅助GC(mutator assist). 需要注意的是, 不是所有根对象的扫描都需要STW, 例如扫描栈上的对象只需要停止拥有该栈的G. 写屏障的实现使用了Hybrid Write Barrier, 大幅减少了第二次STW的时间.</p><p>看不明白，先记下吧=_=。</p><h2 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h2><h3 id="互斥锁" tabindex="-1"><a class="header-anchor" href="#互斥锁" aria-hidden="true">#</a> 互斥锁</h3><p>互斥锁是一种最基本的锁，它的作用是保证在同一时刻只有一个 goroutine 可以访问共享资源。在 Go 语言中，互斥锁由 <code>sync</code> 包提供，使用 <code>syns.Mutex</code> 结构体来表示。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 初始化互斥锁</span>
mu <span class="token operator">:=</span> sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 上锁</span>
mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 解锁</span>
mu<span class="token punctuation">.</span><span class="token function">UnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Lock()</code> 后如果再次执行 <code>Lock()</code> 第二个 <code>Lock()</code> 会阻塞，造成死锁，导致异常退出</li><li>如果没有 <code>Lock()</code> 却执行 <code>UnLock()</code> 则会触发 <code>panic</code> ，导致异常退出</li><li>互斥锁的性能开销较大，因为每次加锁和解锁都需要调用系统内核函数，所以在性能要求较高的场景下，可以考虑使用读写锁</li></ul><h3 id="读写锁" tabindex="-1"><a class="header-anchor" href="#读写锁" aria-hidden="true">#</a> 读写锁</h3><p>读写锁是一种特殊的锁，它分为读锁和写锁。读锁可以被多个 goroutine 同时持有，但是写锁只能被一个 goroutine 持有。在 Go 语言中，读写锁由 <code>sync</code> 包提供，使用 <code>sync.RWMutex</code> 结构体来表示。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 初始化读写锁</span>
rw <span class="token operator">:=</span> sync<span class="token punctuation">.</span>RWMutex<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 读锁</span>
rw<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 读解锁</span>
rw<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 写锁</span>
rw<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 写解锁</span>
rw<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Lock</code> 和 <code>Unlock</code>, <code>RLock()</code>和<code>RUnlock()</code> 必须成对出现，否则会导致死锁</li><li><code>Lock</code> 不能同时执行两次，会导致死锁</li><li><code>RWLock</code> 在传参时必须使用指针传递，不能使用值传递副本</li><li><code>RWLock</code> 是不可重入锁，不能获取了写锁后，再获取读锁。也就是没有写锁降级这种说法。</li></ul><p>读-写者问题</p><ul><li>读者优先 （readers-preference） <ul><li>读者优先指的是读的操作优先于写的操作，当有读操作时，写操作会被阻塞，但是读操作不会被阻塞。只有所有的读者都释放了读锁，写操作才能进行。</li></ul></li><li>写者优先 （writers-preference） <ul><li>写者优先指的是写的操作优先于读的操作，当有写操作时，当前的读者可以继续进行读操作，但是不允许新的读者进行读操作，当前读者完成读取操作后，写者会进行写入操作，只有写者完成写入操作后，新的读者才能进行读操作。</li></ul></li></ul><p>注意</p><ul><li>读者优先在频繁读取的系统中会导致写者长时间阻塞导致写饥饿</li><li>写者优先在频繁写入的系统中会导致读者长时间阻塞导致读饥饿</li><li><strong>Golang 的 <code>sync.RWMutex</code> 是写者优先的，优先处理写的操作</strong></li></ul><h2 id="原子操作" tabindex="-1"><a class="header-anchor" href="#原子操作" aria-hidden="true">#</a> 原子操作</h2><p>什么是原子操作?</p><p>原子操作是一种不可分割的操作，要么全部执行成功，要么全部执行失败。在针对内存中某个值的操作时，原子操作可以确保在并发环境下不会出现数据竞争，其他 goroutine 无法在操作进行中对该值进行读写。</p><p>在 Golang 中， 针对原子操作，可以使用 <code>sync/atomic</code> 包提供的原子操作函数。这些函数可以确保在并发环境下对共享资源进行安全的读写。</p><p><strong>原子操作的实现原理是通过 <code>CPU</code> 提供的原子指令来实现的，这些指令可以确保在执行过程中不会被中断，从而保证操作的原子性。由于大多数 <code>CPU</code> 的原子操作都是基于 <code>32</code> 位或 <code>64</code> 位的寄存器，所以 <code>Golang</code> 原子操作的范围也仅限于这两种类型。</strong></p><p>注意</p><p>实际上，原子操作也可以通过加锁来实现，但是加锁操作涉及到<strong>内核态</strong>的上下文切换，会有比较大的性能消耗，而原子操作是在<strong>用户态</strong>完成的，性能更高，效率可能相差几倍。</p><p><strong>互斥锁和原子操作的区别</strong></p><ul><li>互斥锁通常用于保护一段代码，只有一个 <code>goroutine</code> 可以访问这段代码，其他 <code>goroutine</code> 需要等待， 而原子操作通常用于保护一个变量，确保在并发环境下对变量的读写是安全的。</li><li>互斥锁是一种悲观锁，它认为并发访问是一种常态，所以会在访问前先加锁，而原子操作是一种乐观锁，它认为并发访问是一种特例，所以会先尝试进行操作，如果失败再进行重试。</li><li>互斥锁是一种重量级锁，它会涉及到内核态的上下文切换，性能消耗较大，而原子操作是一种轻量级锁，它是在用户态完成的，性能更高。</li><li>互斥锁有操作系统的调度器实现， 而原子操作则是有硬件提供的原子指令实现，无需加锁而实现并发安全。</li></ul><img src="`+v+`" alt="screenshot2024-12-24 15.55.29" style="zoom:50%;"><p>使用示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> count <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>
	start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token keyword">range</span> <span class="token number">10000</span> <span class="token punctuation">{</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
			wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;time cost: %v, count: %d&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实atomic包提供了一些常用的数据类型供我们使用：<code>atomic.Int32{}</code>，<code>atomic.Int64{}</code>，<code>atomic.Bool {}</code>等，提供的api的内部都是使用了上面的原子操作函数来实现的。</p><p>对于常用的<code>sync.map{}</code>，他内部是靠锁和原子操作一同实现的。</p><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p>闭包是由函数和与其相关的引用环境组合而成的实体。简单来说，闭包就是一个引用了作用域之外的变量的函数（Func），该函数的存在时间可以超过创建他的作用域。和JS中的一样。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>count <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
  i <span class="token operator">:=</span> <span class="token number">0</span> <span class="token comment">// 初始化函数内变量</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    i <span class="token operator">++</span> <span class="token comment">// 函数内变量加 1</span>
    <span class="token keyword">return</span> i
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><p><strong>中间件</strong></p><p>在定义 web 中间件时经常会看到以下形式的代码:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makeHandler</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        m <span class="token operator">:=</span> validPath<span class="token punctuation">.</span><span class="token function">FindStringSubmatch</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>
        <span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            http<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token function">fn</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 如果没问题则继续执行 fn</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到, 返回值是 <code>http.HandlerFunc</code>, 这个函数里面调用了 fn, 这样的话就可以实现链式操作，既执行了中间件代码，又可以继续执行函数，非常方便。</p><p><strong>状态共享</strong></p><p>闭包可以用来共享多次执行函数的状态，常见的例子是迭代器。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    iterator <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>list <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       i <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span>
       <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          i<span class="token operator">++</span>
          <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    ints <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
    iter <span class="token operator">:=</span> <span class="token function">iterator</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
       v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
          <span class="token keyword">break</span>
       <span class="token punctuation">}</span>
       fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>回调函数</strong></p><p>可以通过传参，实现传入回调函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">GetData</span><span class="token punctuation">(</span>data <span class="token builtin">int</span><span class="token punctuation">,</span> callback <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">:=</span> data <span class="token operator">+</span> <span class="token number">2</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数工厂</strong></p><p>通过闭包还可以构造函数工厂，通过传入参数返回对应函数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	factory <span class="token operator">:=</span> <span class="token function">CalculationFactory</span><span class="token punctuation">(</span><span class="token string">&quot;ADD&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">CalculationFactory</span><span class="token punctuation">(</span>t <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> t <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token string">&quot;ADD&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> a <span class="token operator">+</span> b
		<span class="token punctuation">}</span>
	<span class="token keyword">case</span> <span class="token string">&quot;MUL&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> a <span class="token operator">*</span> b
		<span class="token punctuation">}</span>
	<span class="token keyword">case</span> <span class="token string">&quot;SUB&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> a <span class="token operator">-</span> b
		<span class="token punctuation">}</span>
	<span class="token keyword">case</span> <span class="token string">&quot;DIV&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> a <span class="token operator">/</span> b
		<span class="token punctuation">}</span>
	<span class="token keyword">case</span> <span class="token string">&quot;MOD&quot;</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> a <span class="token operator">%</span> b
		<span class="token punctuation">}</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> a <span class="token operator">+</span> b
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以传入 <code>ADD</code> 获取加法函数，<code>DIV</code> 获取除法函数。</p><h2 id="byte-rune" tabindex="-1"><a class="header-anchor" href="#byte-rune" aria-hidden="true">#</a> byte&amp;rune</h2><p><code>byte</code> 和 <code>rune</code> 都是用于表示字符的类型，但它们之间有一些区别：</p><p>类型不同：</p><ul><li><code>byte</code> ：字节，是 <code>uint8</code> 的别名类型</li><li><code>rune</code> ：字符，是 <code>int32</code> 的别名类型</li></ul><p>存储的字符不同：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//byte 用于表示 ASCII 码字符，只能存储 0-255 范围内的字符。</span>
<span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;Y&#39;</span>  <span class="token comment">// ASCII 码字符</span>

<span class="token comment">//rune 用于表示 Unicode 字符，可以存储任意 Unicode 字符。</span>
<span class="token keyword">var</span> b <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">&#39;酥&#39;</span>  <span class="token comment">// Unicode 字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>占用的字节大小不同：byte 占用1个字节，rune 占用4个字节</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;unsafe&quot;</span>
<span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;Y&#39;</span>
<span class="token keyword">var</span> b <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">&#39;酥&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;a 占用 %d 个字节数\\nb 占用 %d 个字节数&quot;</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出: a 占用 1 个字节数 b 占用 4 个字节数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="new-make" tabindex="-1"><a class="header-anchor" href="#new-make" aria-hidden="true">#</a> new&amp;make</h2><p><code>new</code> 用于给任意的类型分配内存地址，并返回该类型的指针，且初始化值为<strong>零值</strong>。注意new一个引用类型，他指针指向是nil。</p><blockquote><p>new一般用于生成一个值类型的指针变量</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
	n <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 0xc00008a030</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token comment">// &quot;&quot;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 0xc00000a0d8</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token comment">// 0</span>
  
  c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token operator">*</span>c <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token comment">// 还是需要再一次make初始化的</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>make</code> 主要用于引用数据类型 <code>slices</code> <code>map</code> <code>channel</code> 的初始化</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment">// map[]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,176),g=[b];function h(f,y){return s(),a("div",null,g)}const x=n(m,[["render",h],["__file","base.html.vue"]]);export{x as default};
